import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from pathlib import Path

myself = Path(__file__).resolve()
model_metrics =  myself.parents[0] / 'model_metrics.csv'

st.set_page_config(layout="wide", page_title="Hello")
st.title("–ö–æ—Ä—à–∏–∫–æ–≤ –ï. –î._2023-–§–ì–∏–ò–ë-–ü–ò-1–±_12 –í–∞—Ä–∏–∞–Ω—Ç_–î–∞—Ç–∞—Å–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–æ–¥—ã") 

current_dir = Path(__file__).parent

selected = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["Model metrics", "Dataset info", "HeatMap"])
if selected == "Dataset info":
    file_path = current_dir / "Dataset_info.py"
    with open(file_path, 'r', encoding='utf-8') as f:
        exec(f.read())
elif selected == "HeatMap":
    file_path = current_dir / "HeatMap.py"
    with open(file_path, 'r', encoding='utf-8') as f:
        exec(f.read())
elif selected == "Model metrics":
  # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–∏
  def load_metrics():
      return pd.read_csv(model_metrics)

  metrics_df = load_metrics()

  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  metrics = dict(zip(metrics_df['Metric'], metrics_df['Value']))

  # –°–µ–∫—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–∏
  st.header("üìà –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ Decision Tree Model")


  st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
  cols = st.columns(4)
  with cols[0]:
      st.metric("Accuracy", f"{metrics['Accuracy']:.2%}", 
                help="–î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö")
  with cols[1]:
      st.metric("Recall", f"{metrics['Recall']:.2%}", 
                help="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª—É—á–∞–∏ (True Positive Rate)")
  with cols[2]:
      st.metric("Precision", f"{metrics['Precision']:.2%}", 
                help="–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
  with cols[3]:
      st.metric("F1-score", f"{metrics['F1-score']:.2%}", 
                help="–ì–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ precision –∏ recall")


  st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫")
  fig = px.bar(
      x=list(metrics.keys()),
      y=list(metrics.values()),
      text=[f"{v:.2%}" for v in metrics.values()],
      labels={'x': '–ú–µ—Ç—Ä–∏–∫–∞', 'y': '–ó–Ω–∞—á–µ–Ω–∏–µ'},
      color=list(metrics.keys()),
      color_discrete_sequence=px.colors.qualitative.Pastel
  )
  fig.update_layout(
      yaxis=dict(range=[0, 1]),
      showlegend=False
  )
  fig.update_traces(textposition='outside')
  st.plotly_chart(fig, use_container_width=True)


  st.subheader("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
  st.markdown(f"""
  - –ú–æ–¥–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫—É—é –æ–±—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å (**{metrics['Accuracy']:.2%}**), —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, 
    —á—Ç–æ –æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤–æ–¥—É –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤.
  - –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å Recall (**{metrics['Recall']:.2%}**) —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç 
    –ø—Ä–∏–º–µ—Ä–Ω–æ {int(metrics['Recall']*100)}% —Å–ª—É—á–∞–µ–≤ —Å –æ–ø–∞—Å–Ω–æ–π –≤–æ–¥–æ–π.
  - Precision (**{metrics['Precision']:.2%}**) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç 
    "–æ–ø–∞—Å–Ω–æ", –æ–Ω–∞ –ø—Ä–∞–≤–∞ –≤ {int(metrics['Precision']*100)}% —Å–ª—É—á–∞–µ–≤.
  - F1-score (**{metrics['F1-score']:.2%}**) —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ —Ö–æ—Ä–æ—à–µ–º –±–∞–ª–∞–Ω—Å–µ –º–µ–∂–¥—É 
    —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –ø–æ–ª–Ω–æ—Ç–æ–π.
  """)
